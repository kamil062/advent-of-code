let input = `R 2
U 2
L 2
U 1
L 1
U 1
R 1
L 2
U 2
R 1
D 2
U 2
R 1
D 1
L 1
R 1
L 2
U 2
L 2
D 1
R 1
U 2
L 2
U 2
R 1
D 1
L 2
U 2
R 2
L 2
U 2
R 2
L 1
U 2
R 2
D 1
L 1
R 2
U 1
R 2
D 2
L 1
R 1
U 1
R 2
L 1
U 1
R 1
L 2
D 2
R 2
D 1
L 2
R 2
L 1
R 2
D 1
R 2
D 2
L 1
R 1
U 2
L 2
R 2
D 1
R 2
U 2
L 1
D 2
R 2
L 2
D 2
U 1
R 2
U 2
R 2
D 2
R 1
U 2
D 2
R 1
L 1
R 1
U 2
D 2
R 1
U 1
R 1
L 1
U 2
L 2
D 2
U 2
D 2
R 2
D 2
L 1
U 2
L 1
R 1
D 2
L 1
U 1
D 2
U 2
D 2
R 2
U 1
R 1
U 2
D 1
R 2
D 2
L 3
U 1
D 2
U 3
R 3
L 1
D 2
R 1
D 3
L 3
R 1
D 3
L 3
D 1
R 3
D 1
L 1
D 2
R 3
D 1
U 2
R 2
L 1
D 1
R 3
U 2
L 3
U 2
D 2
R 2
D 3
U 1
D 3
L 3
R 2
L 2
D 3
L 2
U 3
R 2
D 1
R 2
U 3
R 3
U 3
L 1
R 3
D 2
R 1
L 3
R 1
D 3
L 3
D 1
U 2
R 3
U 3
D 1
L 2
R 3
L 1
D 2
L 3
D 1
L 3
D 1
U 2
D 3
R 2
U 1
L 3
R 3
L 2
R 1
L 2
D 2
R 3
U 3
R 3
D 2
U 3
D 2
R 3
D 3
R 2
U 1
L 3
U 2
R 2
L 2
U 1
L 3
D 2
U 2
R 1
L 2
D 2
U 3
R 2
D 2
L 3
U 1
L 1
U 2
R 2
U 1
D 2
U 2
R 3
L 1
U 1
D 3
U 4
L 3
D 2
L 3
U 4
D 2
R 4
L 4
U 2
D 3
U 2
D 3
L 3
U 2
D 3
L 1
U 1
R 1
L 4
R 3
D 3
L 2
U 3
R 2
L 1
U 4
D 3
U 1
L 2
D 4
L 1
R 3
D 4
R 1
L 1
U 3
L 3
D 3
R 3
U 1
L 4
U 3
R 3
L 3
U 2
R 3
L 3
R 1
D 3
R 3
L 4
R 3
D 4
L 3
U 2
R 4
L 1
U 1
R 4
D 3
U 1
R 1
D 1
U 3
R 2
L 1
D 1
L 3
D 4
R 4
U 4
D 1
R 3
D 3
R 3
L 4
R 4
L 2
R 2
D 3
R 4
D 2
U 4
L 3
D 1
R 2
U 2
R 3
D 1
R 3
D 1
L 1
U 4
L 2
U 4
L 4
U 3
R 4
L 3
R 3
L 4
U 4
R 4
D 2
R 2
D 3
U 4
D 1
U 1
D 5
U 3
D 5
U 5
D 3
L 3
U 3
D 3
R 1
D 3
R 4
U 4
D 1
R 5
D 5
R 2
U 5
L 2
U 2
D 2
U 4
R 1
D 1
L 2
R 2
D 1
L 5
R 5
D 4
R 5
L 1
D 2
L 3
U 2
D 3
L 1
R 5
U 3
R 1
D 3
R 1
U 1
R 3
U 2
D 5
L 5
R 1
U 3
L 4
D 2
R 1
D 3
U 4
R 3
L 4
U 2
D 3
U 1
R 5
D 3
L 2
U 3
L 5
U 3
L 3
D 5
L 5
U 3
R 2
D 5
U 4
L 5
U 1
D 5
R 3
D 1
L 5
R 2
D 2
U 5
R 1
D 2
L 3
D 2
L 5
D 2
U 5
L 2
R 3
L 3
D 3
U 2
R 5
L 1
U 5
R 5
L 2
D 5
R 3
L 2
U 2
D 3
R 4
L 1
R 3
D 5
R 3
D 4
R 2
D 5
R 3
L 3
R 2
U 2
L 1
R 6
U 6
L 6
U 2
R 6
D 4
U 1
L 1
R 1
D 1
L 6
D 6
U 4
L 6
D 3
R 1
U 1
D 3
R 3
D 5
U 1
L 2
R 6
U 5
D 6
L 6
R 2
U 1
D 1
L 4
D 5
L 6
U 1
L 6
R 5
U 5
D 3
L 5
R 2
U 3
D 1
L 2
U 2
D 1
L 5
D 1
U 5
R 4
L 2
R 5
D 3
U 3
R 2
U 3
D 6
L 5
R 1
U 5
L 1
R 6
D 6
R 6
L 1
D 2
R 5
L 4
D 3
L 5
R 4
L 6
U 1
L 2
U 3
R 4
D 3
R 3
L 1
D 4
L 2
R 5
D 2
R 2
D 5
U 2
L 4
R 4
U 4
R 1
D 3
L 6
U 5
L 5
D 6
U 3
D 6
R 6
D 3
U 6
L 6
D 3
L 6
R 3
D 2
L 4
D 5
L 5
D 2
L 6
R 1
D 1
L 4
U 6
R 1
L 5
D 7
U 2
R 6
D 7
L 2
R 3
U 1
L 3
R 2
U 7
D 7
U 7
D 4
R 2
L 7
R 7
L 5
R 4
U 5
L 5
U 6
R 2
D 3
L 2
U 6
D 5
R 2
D 2
R 5
U 7
R 3
D 1
L 5
R 1
U 3
D 6
U 6
L 7
U 4
L 6
D 1
L 7
U 4
D 7
L 1
D 6
L 2
R 5
L 7
U 3
D 2
R 7
L 2
U 6
L 3
U 6
L 5
R 2
L 7
D 3
L 7
R 1
L 1
R 5
D 6
L 2
D 5
L 4
D 3
U 5
D 1
R 4
U 1
L 2
R 3
U 7
D 6
U 2
D 4
U 5
D 5
U 7
R 2
D 1
U 2
L 2
U 3
D 1
R 4
D 1
R 3
U 1
R 7
D 4
R 3
D 2
L 2
U 4
L 2
U 6
L 4
D 6
U 3
L 1
U 4
R 7
D 6
L 2
D 7
R 4
U 5
R 4
D 5
R 6
D 4
R 4
U 2
R 3
L 7
R 8
D 8
R 5
U 2
D 6
L 2
R 4
U 3
L 1
R 2
D 5
L 1
D 5
L 5
U 1
R 8
D 1
U 1
L 1
R 8
L 3
R 6
L 1
U 3
R 6
L 5
U 2
L 8
R 4
U 4
R 6
U 5
R 1
L 2
R 5
D 1
U 4
L 3
U 3
R 1
U 3
R 8
L 1
U 2
L 7
D 6
L 6
R 4
D 2
R 2
L 8
D 4
R 4
U 4
L 6
D 3
R 7
D 8
U 4
R 4
U 2
L 8
D 5
L 4
U 7
D 8
U 6
R 6
L 5
D 5
L 2
D 1
R 1
D 4
R 5
L 7
D 8
U 2
D 3
L 5
R 4
L 7
R 3
L 1
D 8
R 5
L 8
R 8
D 1
R 4
D 1
L 2
D 5
L 7
U 1
L 4
R 5
L 3
R 9
D 9
L 4
R 6
L 6
R 1
L 3
R 5
D 8
L 1
U 2
R 8
U 7
D 6
L 8
D 1
L 9
D 5
L 1
D 6
L 8
R 2
L 6
R 4
U 1
R 6
L 5
R 5
L 6
R 8
D 5
L 4
R 2
L 7
R 2
U 9
L 6
R 2
U 7
D 4
U 2
L 2
U 8
R 8
U 3
R 6
D 6
L 2
D 4
L 4
R 2
L 1
U 8
D 2
R 2
L 1
R 7
L 8
D 8
L 4
U 4
R 5
U 1
D 8
L 8
R 9
D 6
L 1
D 5
L 9
U 6
D 6
U 3
D 5
R 5
U 9
L 2
R 5
U 9
L 1
D 4
U 4
L 5
D 6
R 3
L 6
U 3
R 4
U 5
L 5
D 8
L 6
U 4
D 1
U 7
D 2
L 3
R 7
U 1
R 4
U 4
R 9
U 3
D 2
L 6
R 9
U 3
L 8
R 10
U 3
R 8
D 8
L 1
U 4
R 5
U 8
D 10
U 10
L 7
D 5
L 2
R 7
L 1
U 10
R 1
D 1
L 5
R 7
U 6
L 3
R 7
U 4
R 3
U 3
R 4
U 8
L 8
D 6
L 5
U 10
L 9
R 3
U 10
D 9
U 5
D 10
U 7
D 6
U 9
L 8
U 3
D 6
R 9
U 9
D 4
R 8
U 7
R 6
U 5
R 5
U 3
D 4
R 9
L 7
D 7
U 1
L 3
R 4
D 8
L 4
D 6
U 1
R 7
D 4
L 9
D 2
R 4
U 10
D 5
U 6
D 6
R 5
U 6
D 6
L 7
U 4
D 1
L 6
R 8
L 7
U 8
L 2
R 6
L 9
D 2
U 9
D 5
U 10
D 1
R 9
L 6
D 7
U 1
D 4
L 3
R 7
U 1
R 6
D 4
R 1
D 4
L 8
R 1
U 10
D 1
U 5
R 6
U 5
D 2
U 10
R 8
L 7
U 6
L 4
R 6
L 7
U 3
R 4
D 1
L 4
R 7
D 2
L 4
U 3
D 6
U 10
D 5
R 8
U 5
L 9
D 4
L 4
D 8
U 9
R 2
U 4
R 4
U 9
D 1
R 7
U 5
L 2
U 10
R 4
D 1
L 3
R 11
D 7
U 7
D 7
L 11
U 2
D 1
U 1
R 1
U 3
L 6
U 10
L 4
U 5
L 10
D 1
U 8
R 7
L 4
U 7
L 9
U 6
L 11
U 3
R 8
L 6
D 9
L 9
D 1
R 7
L 11
D 9
R 7
U 2
D 11
L 4
D 4
R 11
D 7
U 2
D 7
R 2
D 1
L 6
D 11
R 3
U 7
L 10
U 7
D 2
R 2
U 1
L 9
R 11
L 3
R 7
L 2
D 11
R 1
D 4
R 3
L 10
U 5
D 3
R 10
D 8
U 1
D 2
R 10
L 8
R 1
D 8
U 6
R 8
D 8
L 2
D 7
U 4
L 5
R 4
D 4
U 7
D 11
U 11
R 4
L 6
U 3
L 10
U 1
L 11
U 3
D 6
L 11
R 4
L 3
D 12
L 7
R 9
L 9
U 10
L 1
D 6
L 10
U 3
R 6
D 5
L 6
R 8
D 4
R 6
L 6
D 9
L 1
D 11
U 6
L 3
R 10
U 12
R 11
D 10
U 5
R 6
D 12
U 12
R 8
U 5
D 1
R 12
D 1
R 7
U 8
D 5
U 7
D 3
R 7
D 8
U 11
R 2
U 4
L 2
R 1
L 3
U 9
L 5
D 11
R 10
L 3
U 3
D 3
R 1
L 8
D 6
R 7
U 11
L 6
D 1
R 12
D 8
U 7
R 2
U 5
R 4
U 10
L 8
D 5
U 10
D 3
L 6
R 4
L 9
D 6
R 7
D 4
U 10
D 1
L 6
R 1
L 7
U 5
L 9
U 12
L 7
U 6
D 6
U 9
L 7
U 4
D 5
L 1
U 5
D 1
L 10
D 2
R 3
D 13
U 11
L 1
U 1
D 1
R 12
U 13
L 5
D 11
L 9
U 11
L 2
R 6
D 7
L 2
U 5
R 2
U 10
L 9
D 7
R 12
D 10
L 12
D 8
L 8
R 12
D 11
U 12
L 1
U 2
D 6
R 3
D 2
U 9
L 10
R 4
U 2
D 10
U 7
R 6
U 9
R 4
L 3
U 13
R 9
U 6
D 8
L 5
R 11
L 6
R 12
D 5
U 7
R 11
D 1
L 9
R 12
U 2
R 5
U 1
R 9
U 6
D 4
R 2
U 2
D 5
L 9
R 6
U 4
L 6
R 9
L 4
U 3
L 9
R 6
L 5
D 6
L 3
R 6
L 3
D 9
U 5
D 1
R 5
L 3
U 9
R 7
L 8
R 6
L 7
U 4
D 13
U 2
L 1
U 11
R 8
L 13
D 1
U 4
L 13
D 1
L 8
D 13
L 2
R 2
D 1
L 14
U 7
R 11
L 1
R 4
L 5
R 11
U 7
D 8
L 3
U 1
L 12
U 13
D 9
R 1
L 11
U 12
D 5
U 10
D 10
R 9
L 1
D 5
R 7
L 1
D 13
R 10
U 2
R 3
L 14
D 7
R 12
U 13
L 2
U 13
L 3
U 5
L 11
R 8
D 11
R 6
L 11
R 5
L 3
U 1
L 5
R 13
L 12
D 10
R 8
D 6
L 1
R 10
U 5
R 3
D 11
L 8
R 4
D 2
L 1
R 7
U 3
L 14
R 3
L 4
R 13
L 10
U 3
D 1
L 11
U 1
D 6
R 10
U 1
R 2
L 7
U 3
L 5
U 4
D 7
R 8
U 12
R 6
L 2
D 5
L 11
R 4
L 4
R 6
L 3
R 10
U 4
D 9
U 1
D 4
L 12
D 13
L 1
D 6
R 8
L 1
D 9
L 8
U 3
D 3
U 2
R 11
U 10
L 5
D 11
U 12
D 3
R 15
L 1
R 5
D 9
U 15
D 2
L 9
U 9
D 15
R 4
L 9
R 8
L 12
D 5
R 12
U 9
L 9
U 7
L 12
R 11
U 9
L 15
D 9
L 4
R 4
U 13
D 7
R 7
D 8
U 5
D 5
L 15
D 2
R 8
D 10
R 5
U 13
R 1
L 8
D 12
R 2
L 4
D 9
L 9
D 7
R 5
U 15
R 9
L 2
R 8
U 11
D 15
U 13
D 5
U 5
R 11
U 7
R 11
D 12
U 6
D 6
L 8
D 8
R 14
U 13
R 11
D 1
R 4
U 14
R 11
L 8
D 2
U 13
R 15
L 10
D 2
L 3
R 9
U 2
R 8
U 15
R 3
D 4
L 7
D 7
R 1
D 13
R 1
L 13
U 9
L 13
U 10
L 15
D 5
R 11
D 3
U 3
R 4
L 7
R 1
U 13
R 9
U 7
R 10
D 5
U 7
R 6
L 14
U 2
R 8
D 2
U 16
D 12
R 11
D 4
L 8
U 8
L 13
D 5
R 4
U 8
D 15
R 8
D 13
R 16
U 4
D 3
U 5
D 8
R 16
L 13
U 3
D 6
L 9
R 10
D 6
R 16
D 15
R 11
L 8
D 8
U 4
R 16
D 1
U 11
L 15
R 7
D 2
R 1
D 4
L 1
U 15
D 16
R 3
U 10
D 9
U 6
D 15
R 11
L 6
R 2
U 14
R 4
L 15
R 15
D 16
U 9
D 2
L 8
D 15
R 5
U 13
L 15
D 1
R 4
U 14
D 15
L 15
U 13
R 16
L 7
R 4
D 13
L 15
D 3
L 7
D 4
R 12
D 10
U 8
D 6
L 13
R 15
U 12
L 4
R 16
D 1
R 14
L 9
D 13
U 2
D 9
U 16
L 15
R 12
L 14
R 6
D 1
R 2
L 15
U 7
L 16
U 15
D 11
R 11
L 3
R 11
L 15
U 17
L 14
R 4
U 15
D 6
L 2
R 7
L 16
U 4
L 14
U 9
L 7
D 16
R 4
D 2
R 15
L 6
R 6
D 1
U 5
D 14
U 4
D 11
R 5
U 16
L 3
D 7
R 10
L 3
D 8
L 10
U 1
D 16
L 6
R 6
L 14
R 6
U 11
L 17
D 7
R 2
L 12
D 15
U 16
R 2
U 3
R 16
U 12
L 3
U 5
D 1
R 12
U 17
D 11
L 16
U 13
L 5
D 1
R 2
L 10
U 12
D 7
U 6
R 4
U 5
L 3
R 16
D 1
U 14
R 15
D 6
U 14
R 4
L 6
D 11
R 16
L 15
U 7
L 10
R 5
L 15
R 12
L 17
U 5
D 14
L 6
R 2
U 5
R 10
L 8
D 2
U 17
L 13
D 17
L 5
R 11
L 3
U 11
R 1
L 3
D 1
L 7
D 14
R 13
U 9
D 7
L 15
U 5
D 4
R 7
L 10
D 6
R 18
U 5
R 18
U 6
D 17
U 8
R 16
D 12
R 12
D 9
R 9
U 4
R 16
L 1
D 12
L 12
R 11
D 15
U 13
L 8
R 4
L 1
R 1
D 11
R 15
D 3
L 17
D 17
R 11
U 13
D 11
R 4
D 17
U 8
L 1
D 2
L 16
D 6
L 15
D 17
L 8
U 5
D 15
L 15
U 11
D 9
L 18
U 18
R 14
L 4
U 17
R 11
D 18
U 2
R 9
D 15
R 5
L 13
R 2
L 18
D 5
U 14
L 17
R 3
U 4
R 15
U 1
D 15
U 12
D 17
U 11
L 3
R 10
U 13
R 12
L 10
R 1
D 4
U 2
D 14
R 14
U 5
R 16
U 17
R 16
U 18
R 6
U 5
R 18
U 12
D 7
R 9
L 1
U 15
D 10
L 4
U 9
L 3
U 1
R 12
D 14
U 13
L 10
R 8
U 5
D 7
U 1
L 13
U 14
D 18
L 13
D 12
R 2
L 6
D 17
L 18
R 6
U 4
L 7
R 8
U 5
D 1
L 3
U 10
R 5
D 7
U 16
R 12
U 8
L 18
R 1
L 11
D 14
L 19
R 15
U 14
L 8
R 14
U 13
D 18
U 14
L 14
U 11
L 10
D 11
L 11
R 15
L 12
R 10
L 9
R 9
L 9
D 3
R 9
L 6
R 8
D 7
L 18
D 12
R 3
U 7
R 18
U 9
L 14
D 12
L 10
U 15
L 11
R 17
D 7
R 5
L 3
U 13
D 7
U 13
R 16
D 2
L 7
R 15
L 14
U 19
D 3
L 19
D 11
R 8
D 6
U 12
R 5
U 6
L 7
R 4
L 3
D 6
L 17
U 16
D 11
U 12
D 4
R 6
D 10
L 3
D 15
R 5
L 6
D 11
U 17
L 14
D 15
L 1
D 6
R 16
D 11
U 2
D 2
U 7
D 10
L 11
D 19
L 12
D 3
L 18
U 3`;

type Direction = 'R' | 'L' | 'U' | 'D';
type Position = [number, number];

const manhattanDistance = (pos1: Position, pos2: Position): number => {
    return Math.abs(pos1[0] - pos2[0]) + Math.abs(pos1[1] - pos2[1]);
}

const translate = (position: Position, translation: Position): Position => {
    return [position[0] + translation[0], position[1] + translation[1]];
}

const nextHeadPosition = (position: Position, direction: Direction): Position => {
    if (direction == 'R') return [position[0] + 1, position[1]];
    if (direction == 'L') return [position[0] - 1, position[1]];
    if (direction == 'U') return [position[0], position[1] + 1];
    if (direction == 'D') return [position[0], position[1] - 1];

    return position;
}

const nextTailPosition = (headPosition: Position, tailPosition: Position): Position => {
    let horizontalDifference = headPosition[0] - tailPosition[0];
    let verticalDifference = headPosition[1] - tailPosition[1];

    let isOnTheSameAxis = horizontalDifference == 0 || verticalDifference == 0;
    let distance = manhattanDistance(headPosition, tailPosition);

    let translation: Position = [0, 0];

    if (isOnTheSameAxis && distance == 2) {
        // On the same axis and two cells away - move tail towards head
        translation = [
            (horizontalDifference != 0) ? Math.sign(horizontalDifference) : 0,
            (verticalDifference != 0) ? Math.sign(verticalDifference) : 0
        ];
    } else if (!isOnTheSameAxis && distance > 2) {
        // On different axes and more than 2 cells away (not touching) - move diagonally towards head
        translation = [
            Math.sign(horizontalDifference),
            Math.sign(verticalDifference)
        ];
    }

    return translate(tailPosition, translation);
}

const visualize = (positions: Position[], gridSize: Position) => {
    let grid: string[][] = [];

    for (let i = 0; i < gridSize[0]; i++) grid[i] = Array(gridSize[1]).fill('.')

    for (let i = positions.length - 1; i >= 0; i--) {
        let position = positions[i];
        grid[position[1]][position[0]] = (i == 0 ? 'H' : (i)).toString();
    }

    console.log("\n" + grid.reverse().map(row => row.join('')).join('\n') + "\n");
}

const simulateRope = (numberOfKnots: number, steps: string[]): number => {
    let ropePositions: Position[] = Array(numberOfKnots).fill([0, 0]);
    let tailVisitedUniquePositions: Set<string> = new Set();

    // Track initial tail position
    tailVisitedUniquePositions.add(ropePositions[numberOfKnots - 1].toString());

    for (let step of steps) {
        let direction: Direction = <Direction>step.split(' ')[0];
        let numberOfSteps: number = parseInt(step.split(' ')[1]);

        for (let i = 0; i < numberOfSteps; i++) {
            // Move head
            ropePositions[0] = nextHeadPosition(ropePositions[0], direction);

            // Move other knots to follow
            for (let j = 1; j < ropePositions.length; j++) {
                ropePositions[j] = nextTailPosition(ropePositions[j - 1], ropePositions[j]);
            }

            // Track tail position
            tailVisitedUniquePositions.add(ropePositions[numberOfKnots - 1].toString());
        }
    }

    return tailVisitedUniquePositions.size;
}

console.clear();
console.log(
    simulateRope(2, input.split('\n')),
    simulateRope(10, input.split('\n'))
)